"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var removePx = function removePx(val) {
  return val.replace(/(\d+)px/g, "$1");
};

var formatNumber = function formatNumber(val) {
  return Number(removePx(val));
};

var matchNumbers = function matchNumbers(val) {
  return val.replace(/rgba?\(.*\)/g, "").match(/(^|\s+)\d+(px)?/g);
};

var isZeroOrPxValue = function isZeroOrPxValue(val) {
  return val === "0" || /\d+px/.test(val);
};

var filterNonNumbers = function filterNonNumbers(val) {
  return val.split(/\s+(?![^(]*?\))/).filter(function(val) {
    return isNaN(formatNumber(val));
  });
};

var filterNumbers = function filterNumbers(nums) {
  if (!nums) {
    return [];
  }
  return nums
    .map(function(val) {
      return val.trim();
    })
    .map(function(val) {
      if (!isZeroOrPxValue(val)) {
        return undefined;
      }
      return formatNumber(val);
    });
};

var boxShadowToShadowProps = (exports.boxShadowToShadowProps = function boxShadowToShadowProps(
  value
) {
  var nums = filterNumbers(matchNumbers(value));
  var nonNums = filterNonNumbers(value);
  var offsetX = nums[0];
  var offsetY = nums[1];
  var blurRadius = nums[2];
  var color = nonNums[0];

  if (offsetX === undefined || offsetY === undefined) {
    throw new Error('Failed to parse declaration "boxShadow: ' + value + '"');
  }
  return {
    shadowOffset: { width: offsetX, height: offsetY },
    shadowRadius: blurRadius !== undefined ? blurRadius : 0,
    shadowColor: color !== undefined ? color : "black",
    shadowOpacity: 1
  };
});
